{"version":3,"sources":["upload.png","components/Image.jsx","components/ImagesList.jsx","components/EXIFData.jsx","components/Upload.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","image","className","style","backgroundImage","Math","round","random","slice","floor","ImagesList","images","href","background","require","backgroundSize","backgroundPosition","width","height","map","i","key","urls","small","iterateParams","params","exifData","inputType","Object","entries","parameter","textArea","inputText","parameterToListItem","label","type","name","value","EXIFData","blockName","Model","conditions","animal","parameters","ExposureTime","FNumber","ISOSpeedRatings","FocalLength","Upload","props","state","percent","onChange","bind","handleDrop","handleSubmit","uploadBtnClick","handleDragOver","handleDragLeave","_addImgFileReader","_restartProgressBar","_increaseProgressBar","_scrollToBlockHeader","_uploadingImageHandle","img","document","querySelector","files","this","e","alert","preventDefault","getElementById","click","target","classList","add","remove","dataTransfer","newPercent","clearTimeout","tm","setState","setTimeout","split","toLowerCase","exifList","EXIF","getData","getElementsByTagName","current","getTag","parseFloat","toString","getElementsByName","readAsDataURL","blockHeader","getElementsByClassName","fr","FileReader","addEventListener","oldImg","image_uploader","createElement","src","result","documentElement","clientWidth","body","offsetHeight","maxHeight","clientHeight","maxWidth","marginTop","border","prepend","offsetWidth","interval","setInterval","scrollTop","getBoundingClientRect","top","clearInterval","id","onDragOver","onDragLeave","onDrop","onClick","strokeWidth","strokeColor","position","bottom","left","onSubmit","React","Component","App","fetch","then","response","json","catch","error","message","includes","console","log","pageWrapId","outerContainerId","right","exact","path","process","render","component","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9620d2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload.664a5bfd.png\";","import React from 'react';\r\nimport './image.css';\r\n\r\nconst Image = ({image}) => {\r\n\treturn (\r\n\t\t<li className='image_preview tc grow br3 pa4 ma2 dib bw2 shadow-5'\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundImage: `url(${image})`\r\n\t\t\t}}>\r\n\r\n\t\t\t<span className='avgRating'>\r\n\t\t\t\t{`${Math.round(Math.random()*100)/100 + 1.5}`.slice(0,4)}/\r\n\t\t\t\t<span className='votesCount'>\r\n\t\t\t\t\t{`${Math.floor(Math.random() * 30) + 10}`.slice(0,4)}\r\n\t\t\t\t</span>\r\n\t\t\t</span>\t\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport Image from './Image';\r\nimport './image.css';\r\nimport './ImagesList.scss';\r\n\r\nconst ImagesList = ({images}) => {\r\n\treturn(\r\n\t\t<ul className=\"imageList\">\r\n\t\t\t<a href='/upload'>\r\n\t\t\t<li className='image_preview tc grow br3 pa4 ma2 dib bw2 shadow-5'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackground: `linear-gradient(to bottom right, #fafafa, #aaaaaa)`\r\n\t\t\t\t}}>\r\n\t\t\t\t<div style={{\r\n\t\t\t\t\tbackgroundImage: `url(${require('../upload.png')})`,\r\n\t\t\t\t\tbackgroundSize: 'cover',\r\n\t\t\t\t\tbackgroundPosition: \"center center\",\r\n\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\theight: '100%'\r\n\t\t\t\t}}></div>\r\n\t\t\t</li> \r\n\t\t\t</a>\r\n\t\t\t{ images.map((image, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\timage={image.urls.small} />\r\n\t\t\t\t\t\t)\r\n\t\t\t\t}) \r\n\t\t\t}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default ImagesList;","import React from 'react';\r\nimport './EXIFData.scss';\r\n\r\nconst EXIFData = ({exifData}) => {\r\n\tconst params = {\r\n\t\tblockName: \"Описание снимка\",\r\n\t\tModel: \"Оборудование\",\r\n\t    conditions: \"Условия съемки\",\r\n\t    animal: \"Животное/растение в кадре\",\r\n\t\tparameters: {\r\n\t\t\tblockName: \"Параметры съемки\",\r\n\t\t\tExposureTime: \"Выдержка\", \r\n\t\t\tFNumber: \"Диафрагма\", \r\n\t\t    ISOSpeedRatings: \"ISO\", \r\n\t\t    FocalLength: \"ФР (mm)\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\titerateParams(params, exifData, \"area\")\r\n\t)\r\n}\r\n\r\nconst parameterToListItem = (parameter, exifData, inputType) => {\r\n\tif (parameter[0] === \"blockName\") {\r\n\t\treturn <h5 className=\"blockHeader\">{parameter[1]}</h5>\r\n\t} else {\r\n\t\treturn inputType === \"area\" ? textArea( parameter[1], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\"text\", \r\n\t\t\t\t\t\t\t\t\t\t\t\tparameter[0], \r\n\t\t\t\t\t\t\t\t\t\t\t\texifData[parameter[0]]) :\r\n\t\t\t\t\t\t\t\t\tinputText(  parameter[1], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\"text\", \r\n\t\t\t\t\t\t\t\t\t\t\t\tparameter[0], \r\n\t\t\t\t\t\t\t\t\t\t\t\texifData[parameter[0]])\r\n\t}\r\n}\r\n\r\nconst iterateParams = (params, exifData, inputType) => {\r\n\treturn Object.entries(params).map((parameter) => {\r\n\t\tif (typeof parameter[1] === \"object\") {\r\n\t\t\treturn iterateParams(parameter[1], exifData);\r\n\t\t} else {\r\n\t\t\treturn parameterToListItem(parameter, exifData, inputType)\r\n\t\t}\r\n\t})\r\n}\r\n\r\nconst inputText = (label, type, name, value) => {\r\n\treturn (<li className=\"labeledInputText\">\r\n\t\t\t\t<label>{label}</label>\r\n\t\t\t\t<input  type={type} \r\n\t\t\t\t\t\tname={name} \r\n\t\t\t\t\t\tvalue={value} />\r\n\t\t\t</li>)\r\n}\r\n\r\nconst textArea = (label, type, name, value) => {\r\n\treturn (<div className=\"labeledTextArea\">\r\n\t\t\t\t<label>{label}</label>\r\n\t\t\t\t<textarea type={type} \r\n\t\t\t\t\t\t  name={name} \r\n\t\t\t\t\t\t  value={value} />\r\n\t\t\t</div>)\r\n}\r\n\r\nexport default EXIFData;","import React from 'react';\r\nimport Image from './Image';\r\nimport EXIFData from './EXIFData';\r\nimport EXIF from 'exif-js';\r\nimport { Line } from 'rc-progress';\r\nimport './upload.scss';\r\n\r\nclass Upload extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\texifData: {},\r\n\t\t\tpercent: 0\r\n\t\t}\r\n\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t\tthis.handleDrop = this.handleDrop.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.uploadBtnClick = this.uploadBtnClick.bind(this);\r\n\t\tthis.handleDragOver = this.handleDragOver.bind(this);\r\n\t\tthis.handleDragLeave = this.handleDragLeave.bind(this);\r\n\t\t\r\n\t\tthis._addImgFileReader = this._addImgFileReader.bind(this);\r\n\t\tthis._restartProgressBar = this._restartProgressBar.bind(this);\r\n\t\tthis._increaseProgressBar = this._increaseProgressBar.bind(this);\r\n\t\tthis._scrollToBlockHeader = this._scrollToBlockHeader.bind(this);\r\n\t\tthis._uploadingImageHandle = this._uploadingImageHandle.bind(this);\r\n\t}\r\n\r\n\t// ------- Event Handlers -------\r\n\tonChange() {\r\n\t\t// ------- Checking file format matches to image -------\r\n\t\tconst img = document.querySelector(\"#uploading_image\").files[0];\r\n\t\tthis._uploadingImageHandle(img);\r\n\t}\r\n\r\n\thandleSubmit(e) {\r\n\t\talert(`Данные отправлены! Например, выдержка - \r\n\t\t\t${this.state.exifData[\"ExposureTime\"]}`);\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\tuploadBtnClick() {\r\n\t\tconst file = document.getElementById(\"uploading_image\");\r\n\t\tfile.click();\r\n\t}\r\n\r\n\thandleDragOver(e) {\r\n\t\te.target.classList.add(\"dragover\");\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\thandleDragLeave(e) {\r\n\t\te.target.classList.remove(\"dragover\")\r\n\t}\r\n\r\n\thandleDrop(e) {\r\n\t\te.preventDefault();\r\n\t\te.target.classList.remove(\"dragover\");\r\n\t\tconst img = e.dataTransfer.files[0];\r\n\t\tthis._uploadingImageHandle(img);\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// ------- Service Methods -------\r\n\t_increaseProgressBar() {\r\n\t    const { percent } = this.state;\r\n\t    const newPercent = percent + 1;\r\n\t    if (newPercent >= 100) {\r\n\t      clearTimeout(this.tm);\r\n\t      return;\r\n\t    }\r\n\t    this.setState({ percent: newPercent });\r\n\t    this.tm = setTimeout(this._increaseProgressBar, 10);\r\n  }\r\n\r\n    _restartProgressBar() {\r\n\t    clearTimeout(this.tm);\r\n\t    this.setState({ percent: 0 }, () => {\r\n\t      this._increaseProgressBar();\r\n\t    });\r\n    }\r\n\r\n\t_uploadingImageHandle(img) {\r\n\t\tif (img.type.split(\"/\")[0].toLowerCase() !== \"image\") {\r\n\t\t\talert(\"Пожалуйста, загрузите файл-изображение!\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// ------- Progress bar start -------\r\n\t\tthis._restartProgressBar();\r\n\r\n\t\t// ------- EXIF data fullfill -------\r\n\t\tconst exifList = document.getElementById('exif');\r\n\t\tlet exifData = {};\r\n    \tEXIF.getData(img, function() {\r\n\t        const parameters = [\"Model\", \"ExposureTime\", \"FNumber\", \r\n\t         \t\t\t\t\t\"ISOSpeedRatings\", \"FocalLength\"];\r\n\t        let exifListInputs = exifList.getElementsByTagName(\"input\");\r\n\t        parameters.map(parameter => {\r\n\t        \tlet current = EXIF.getTag(this, parameter);\r\n\t        \tif (parameter === \"ExposureTime\" &&\r\n\t        \t\tcurrent < 0.3) {\r\n\t        \t\tcurrent = `1/${1/parseFloat(current)}`\r\n\t        \t} else if (current && parameter === \"FNumber\") {\r\n\t        \t\tcurrent = `f/${current}`\r\n\t        \t}\r\n\t        \ttry {\r\n\t        \t\texifData[parameter] = current.toString();\r\n\t        \t} catch {\r\n\t        \t\texifData[parameter] = \"\";\r\n\t        \t}\r\n\t\t\t\tdocument.getElementsByName(parameter)[0].value = exifData[parameter];\r\n\t        })\r\n\t    });\r\n\r\n\t    // ------- File reader operations -------\r\n\t    const fr = this._addImgFileReader();\r\n\t\tfr.readAsDataURL(img);\r\n\t\tlet blockHeader = document.getElementsByClassName(\"blockHeader\")[0];\r\n\t    this._scrollToBlockHeader(blockHeader);\r\n\r\n\t\t\r\n\t    // ------- Setting state -------\r\n\t\tthis.setState({exifData: exifData});\r\n\t}\r\n\r\n\t_addImgFileReader() {\r\n\t\tconst fr = new FileReader();\r\n\t\tfr.addEventListener(\"load\", function () {\r\n\t\t\tlet oldImg = document.querySelector(\".imgPreview\");\r\n\t\t\tif (oldImg) { oldImg.remove() };\r\n\t\t    const image_uploader = document.getElementsByClassName(\"image_uploader\")[0];\r\n\t        const img = document.createElement('img');\r\n\t        img.src = fr.result;\r\n\t        img.classList.add(\"imgPreview\");\r\n\r\n\t        // ------- Change it to Image-heighted div height -------\r\n\t        if (document.documentElement.clientWidth >= 768) {\r\n\t        \timage_uploader.style.height = document.body.offsetHeight - 130 + 'px';\t\r\n\t        } else {\r\n\t        \timage_uploader.style.maxHeight = document.body.offsetHeight - 130 + 'px';\r\n\t        }\r\n\t        // ------------------------------------------------------\r\n\r\n\t        img.style.maxHeight = image_uploader.clientHeight - 70 + 'px';\r\n\t        img.style.maxWidth = \"100%\";\r\n\t        document.querySelector(\"#uploading_image\").style.marginTop = \"20px\";\r\n\t        image_uploader.style.border = \"none\";\r\n\t        image_uploader.style.background = \"none\";\r\n\t        image_uploader.prepend(img); \r\n\t\t}, false);\r\n\t\treturn fr;\r\n\t}\r\n\r\n\t_scrollToBlockHeader(target) {\r\n\t\tif (document.body.offsetWidth >= 768) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tlet interval = setInterval(()=>{\r\n\t\t\tdocument.documentElement.scrollTop += 8;\r\n\t\t\tif (target.getBoundingClientRect().top <= 77) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t}\r\n\t\t}, 10)\r\n\t}\r\n\r\n\t// ------- Rendering -------\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<form id='upload_form'>\r\n\t\t\t\t<div className=\"image_uploader dib tc fl w-40\"\r\n\t\t\t\t\tonDragOver = {this.handleDragOver}\r\n\t\t\t\t\tonDragLeave={this.handleDragLeave}\r\n\t\t\t\t\tonDrop={this.handleDrop}>\r\n\t\t\t\t\t<input  type='file' \r\n\t\t\t\t\t\t\tid=\"uploading_image\"\r\n\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t\t></input>\r\n\t\t\t\t\t<input  type=\"button\" \r\n\t\t\t\t\t\t\tclassName=\"dim\" \r\n\t\t\t\t\t\t\tid=\"upload_btn\"\r\n\t\t\t\t\t\t\tonClick={this.uploadBtnClick}\r\n\t\t\t\t\t\t\tvalue=\"ИЗМЕНИТЬ\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Line   percent={this.state.percent} \r\n\t\t\t\t\t\t\tstrokeWidth=\"1\" \r\n\t\t\t\t\t\t\tstrokeColor=\"#d7b900\" \r\n\t\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\tbottom: 0,\r\n\t\t\t\t\t\t\t\tleft: 0\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul className=\"description_inputs dib tc fl w-50\" id='exif'>\r\n\t\t\t\t\t<EXIFData exifData={this.state.exifData} />\r\n\t\t\t\t\t<button type=\"submit\" \r\n\t\t\t\t\t\t\tid=\"submit\" \r\n\t\t\t\t\t\t\tclassName=\"dim\"\r\n\t\t\t\t\t\t\tname=\"Upload\" \r\n\t\t\t\t\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t\t\t\t\tonClick={this.handleSubmit}>\r\n\t\t\t\t\t\t\tЗАГРУЗИТЬ\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</ul>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Upload;","import React from 'react';\nimport ImagesList from '../components/ImagesList';\nimport Upload from '../components/Upload';\nimport './App.scss';\nimport './burger.scss';\nimport { Switch, Route } from 'react-router-dom';\nimport { slide as Menu } from 'react-burger-menu'\n\nclass App extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n  \t\timages: []\n  \t}\n  }\n\n  componentDidMount() {\n  \tfetch('https://api.unsplash.com/photos/random?client_id=99c7ec0457480b03326a57d7e361d98e8a4ffc578f171b1224618789e74e78aa&count=15')\n\t.then(response => response.json())\n\t.then((images) => {\n\t\tthis.setState({images: images});\n\t})\n\t.catch(error => {\n\t\tif (error.message.toLowerCase().includes(\"failed to fetch\")) {\n\t\t\tconsole.log(\"Нет соединения с сервером\")\n\t\t}\n\t})\n  }\n\n  render() {\n\t  \treturn (\n\t    <div className=\"App\">\n\t      <header className=\"header sans-serif\">\n\t      \t\n\t      \t<ul className='menu' id=\"menu-container\">\n\t      \t\t<li className='fl w-20'>\n\t\t\t      \t<img src='logo-medium.png' className='logo' />\n\t\t\t    </li>\n\t\t      \t<Menu \tpageWrapId={ \"page-wrap\" }\n\t\t      \t\t\touterContainerId={ \"menu-container\" }\n\t\t      \t\t\tright\n\t\t      \t>\n\t\t      \t\t<li className='fl w-15 menu-item'>\n\t\t\t\t        <a href=\"/\" className=\"link dim near-white\">My page</a>\n\t\t\t\t    </li>\n\t\t\t\t    <li className='fl w-15 menu-item'>    \n\t\t\t\t        <a href=\"/upload\" className=\"link dim near-white\">Upload</a>\n\t\t        \t</li>\n\t\t      \t</Menu>\n\t      \t\t{/*\n\t\t\t    <li className='fl w-30'>\n\n\t\t\t    </li>\n\t\t\t    <li className='fl w-15'>\n\t\t\t        <a href=\"/\" className=\"link dim near-white\">My page</a>\n\t\t\t    </li>\n\t\t\t    <li className='fl w-15'>    \n\t\t\t        <a href=\"/upload\" className=\"link dim near-white\">Upload</a>\n\t        \t</li>*/}\n\t        </ul>\n\t      </header>\n\t      <div className=\"container\">\n\t      \t<Switch>\n\t            <Route exact path={process.env.PUBLIC_URL + '/'} render={ () => \n\t\t\t\t\t<ImagesList images={this.state.images} />\n\t            } />\n\t            <Route path={process.env.PUBLIC_URL + '/upload'} component={Upload} />\n\t        </Switch>\n\t      \t\n\t      </div>\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<App />\r\n\t</BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}